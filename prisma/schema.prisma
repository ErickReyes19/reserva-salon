generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
  output        = "../app/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Rol {
  id          String       @id @default(uuid())
  nombre      String       @unique
  descripcion String
  createAt    DateTime     @default(now())
  updateAt    DateTime     @updatedAt
  activo      Boolean
  permisos    RolPermiso[]
  usuarios    Usuario[]
}

model Permiso {
  id          String       @id @default(uuid())
  nombre      String       @unique
  descripcion String
  createAt    DateTime     @default(now())
  updateAt    DateTime     @updatedAt
  activo      Boolean
  roles       RolPermiso[]
}

model RolPermiso {
  id        String   @id @default(uuid())
  rolId     String
  permisoId String
  createAt  DateTime @default(now())

  permiso Permiso @relation(fields: [permisoId], references: [id])
  rol     Rol     @relation(fields: [rolId], references: [id])

  @@unique([rolId, permisoId])
  @@index([permisoId], map: "RolPermiso_permisoId_fkey")
}

model Usuario {
  id          String   @id @default(uuid())
  nombre      String
  email       String   @unique
  password    String
  createAt    DateTime @default(now())
  updateAt    DateTime @updatedAt
  activo      Boolean
  rolId       String
  debeCambiar Boolean

  rol       Rol        @relation(fields: [rolId], references: [id])
  fotografo Fotografo? @relation("FotografoUsuario")

  @@index([rolId], map: "Usuario_rolId_fkey")
}

model Galeria {
  id          String    @id @default(uuid())
  nombreFoto  String
  url         String
  fotografoId String
  fotografo   Fotografo @relation("GaleriaFotografo", fields: [fotografoId], references: [id])

  @@map("galeria")
}

model Cliente {
  id       String    @id @default(uuid())
  nombre   String
  email    String    @unique
  telefono String
  createAt DateTime  @default(now())
  updateAt DateTime  @updatedAt
  reservas Reserva[] @relation("ReservasCliente")
}

model Category {
  id       String         @id @default(uuid())
  name     String         @unique
  activo   Boolean
  services PhotoService[]
}

model Fotografo {
  id               String              @id @default(uuid())
  usuarioId        String              @unique
  nombre           String              @unique
  telefono         String?
  bio              String?             @db.Text
  url              String?
  Foto             String
  disponible       Boolean
  usuario          Usuario             @relation("FotografoUsuario", fields: [usuarioId], references: [id])
  reservas         Reserva[]           @relation("ReservasFotografo")
  galeria          Galeria[]           @relation("GaleriaFotografo")
  unavailabilities Unavailability[]
  servicios        FotografoServicio[] // Relación con PhotoService a través de la tabla intermedia
}

model PhotoService {
  id          String              @id @default(uuid())
  name        String              @unique
  img         String
  description String
  precio      Float               @default(0)
  activo      Boolean             @default(true)
  categoryId  String
  category    Category            @relation(fields: [categoryId], references: [id])
  fotografos  FotografoServicio[] 
  reservas    Reserva[]           
}


model FotografoServicio {
  fotografoId String
  servicioId  String

  fotografo Fotografo    @relation(fields: [fotografoId], references: [id])
  servicio  PhotoService @relation(fields: [servicioId], references: [id])

  @@id([fotografoId, servicioId]) // Clave primaria compuesta para evitar duplicados

  // Opcional: índice para facilitar búsquedas rápidas
  @@index([servicioId])
}


model Unavailability {
  id          String    @id @default(uuid())
  fotografoId String
  recurring   Boolean // true = regla semanal, false = bloqueo puntual
  weekday     Int? // 0 = domingo … 6 = sábado (solo si recurring = true)
  startDate   DateTime? // solo si recurring = false
  endDate     DateTime? // solo si recurring = false
  activo      Boolean   @default(true)

  fotografo Fotografo @relation(fields: [fotografoId], references: [id])

  @@index([fotografoId])
}

model Reserva {
  id             String        @id @default(uuid())
  fecha          DateTime
  horaInicio     DateTime
  horaFin        DateTime
  fotografoId    String
  clienteId      String
  photoServiceId String?        
  estado         Boolean       @default(true)
  precio         Float?        
  createdAt      DateTime      @default(now())

  fotografo      Fotografo     @relation("ReservasFotografo", fields: [fotografoId], references: [id])
  cliente        Cliente       @relation("ReservasCliente", fields: [clienteId], references: [id])
  photoService   PhotoService? @relation(fields: [photoServiceId], references: [id])

  @@index([fotografoId], map: "Reserva_fotografoId_fkey")
  @@index([clienteId], map: "Reserva_clienteId_fkey")
  @@index([photoServiceId], map: "Reserva_photoServiceId_fkey")
}


