generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
  output        = "../app/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Rol {
  id          String       @id @default(uuid())
  nombre      String       @unique
  descripcion String
  createAt    DateTime     @default(now())
  updateAt    DateTime     @updatedAt
  activo      Boolean
  permisos    RolPermiso[]
  usuarios    Usuario[]
}

model Permiso {
  id          String       @id @default(uuid())
  nombre      String       @unique
  descripcion String
  createAt    DateTime     @default(now())
  updateAt    DateTime     @updatedAt
  activo      Boolean
  roles       RolPermiso[]
}

model RolPermiso {
  id        String   @id @default(uuid())
  rolId     String
  permisoId String
  createAt  DateTime @default(now())

  permiso Permiso @relation(fields: [permisoId], references: [id])
  rol     Rol     @relation(fields: [rolId], references: [id])

  @@unique([rolId, permisoId])
  @@index([permisoId], map: "RolPermiso_permisoId_fkey")
}

model Usuario {
  id          String   @id @default(uuid())
  nombre      String
  email       String   @unique
  password    String
  createAt    DateTime @default(now())
  updateAt    DateTime @updatedAt
  activo      Boolean
  rolId       String
  debeCambiar Boolean

  rol       Rol        @relation(fields: [rolId], references: [id])
  fotografo Fotografo? @relation("FotografoUsuario")

  @@index([rolId], map: "Usuario_rolId_fkey")
}

model Fotografo {
  id         String    @id @default(uuid())
  usuarioId  String    @unique
  telefono   String?
  bio        String?
  url        String?
  disponible Boolean
  usuario    Usuario   @relation("FotografoUsuario", fields: [usuarioId], references: [id])
  reservas   Reserva[] @relation("ReservasFotografo")
}

model Cliente {
  id       String    @id @default(uuid())
  nombre   String
  email    String    @unique
  telefono String
  createAt DateTime  @default(now())
  updateAt DateTime  @updatedAt
  reservas Reserva[] @relation("ReservasCliente")
}

model Category {
  id       String         @id @default(uuid())
  name     String         @unique
  activo   Boolean
  services PhotoService[]
}

model PhotoService {
  id          String   @id @default(uuid())
  name        String   @unique
  img         String
  description String
  activo      Boolean
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])
}

model Reserva {
  id            String   @id @default(uuid())
  fecha         DateTime // fecha y hora de inicio
  horaInicio    DateTime
  horaFin       DateTime
  fotografoId   String
  pixelpayOrder String   @unique
  estado        Boolean  @default(true)
  createdAt     DateTime @default(now())
  clienteId     String

  fotografo Fotografo @relation("ReservasFotografo", fields: [fotografoId], references: [id])
  cliente   Cliente   @relation("ReservasCliente", fields: [clienteId], references: [id])

  @@index([fotografoId], map: "Reserva_fotografoId_fkey")
  @@index([clienteId], map: "Reserva_clienteId_fkey")
}
