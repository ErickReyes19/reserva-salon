generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
  output        = "../app/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Rol {
  id          String       @id @default(uuid())
  nombre      String       @unique
  descripcion String
  createAt    DateTime     @default(now())
  updateAt    DateTime     @updatedAt
  activo      Boolean
  permisos    RolPermiso[]
  usuarios    Usuario[]
}

model Permiso {
  id          String       @id @default(uuid())
  nombre      String       @unique
  descripcion String
  createAt    DateTime     @default(now())
  updateAt    DateTime     @updatedAt
  activo      Boolean
  roles       RolPermiso[]
}

model RolPermiso {
  id        String   @id @default(uuid())
  rolId     String
  permisoId String
  createAt  DateTime @default(now())

  permiso Permiso @relation(fields: [permisoId], references: [id])
  rol     Rol     @relation(fields: [rolId], references: [id])

  @@unique([rolId, permisoId])
  @@index([permisoId], map: "RolPermiso_permisoId_fkey")
}

model Usuario {
  id          String   @id @default(uuid())
  nombre      String
  email       String   @unique
  password    String
  createAt    DateTime @default(now())
  updateAt    DateTime @updatedAt
  activo      Boolean
  rolId       String
  debeCambiar Boolean

  rol       Rol        @relation(fields: [rolId], references: [id])
  reservas  Reserva[]  @relation("ReservasCliente")
  fotografo Fotografo? @relation("FotografoUsuario")

  @@index([rolId], map: "Usuario_rolId_fkey")
}

model Fotografo {
  id        String    @id @default(uuid())
  usuarioId String    @unique
  telefono  String?
  bio       String?
  usuario   Usuario   @relation("FotografoUsuario", fields: [usuarioId], references: [id])
  reservas  Reserva[] @relation("ReservasFotografo")
}

model Disponibilidad {
  id         String  @id @default(uuid())
  diaSemana  Int // 0 = Domingo, 6 = SÃ¡bado
  horaInicio String // "08:00"
  horaFin    String // "17:00"
  activo     Boolean @default(true)
}

model Reserva {
  id            String        @id @default(uuid())
  fecha         DateTime // fecha y hora de inicio
  horaFin       DateTime
  nombreCliente String
  emailCliente  String
  clienteId     String
  fotografoId   String
  pixelpayOrder String        @unique
  estado        EstadoReserva @default(PENDIENTE)
  createdAt     DateTime      @default(now())

  cliente   Usuario   @relation("ReservasCliente", fields: [clienteId], references: [id])
  fotografo Fotografo @relation("ReservasFotografo", fields: [fotografoId], references: [id])
}

enum EstadoReserva {
  PENDIENTE
  CONFIRMADA
  CANCELADA
}
